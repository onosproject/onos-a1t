/*
A1-P Policy Management Service

API for Policy Management Service. Â© 2021, O-RAN Alliance. All rights reserved. 

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyTypeObject A definition of a policy type, i.e. the schemas for a policy respectively its status
type PolicyTypeObject struct {
	// A JSON schema following http://json-schema.org/draft-07/schema
	PolicySchema map[string]interface{} `json:"policySchema"`
	// A JSON schema following http://json-schema.org/draft-07/schema
	StatusSchema *map[string]interface{} `json:"statusSchema,omitempty"`
}

// NewPolicyTypeObject instantiates a new PolicyTypeObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyTypeObject(policySchema map[string]interface{}) *PolicyTypeObject {
	this := PolicyTypeObject{}
	this.PolicySchema = policySchema
	return &this
}

// NewPolicyTypeObjectWithDefaults instantiates a new PolicyTypeObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTypeObjectWithDefaults() *PolicyTypeObject {
	this := PolicyTypeObject{}
	return &this
}

// GetPolicySchema returns the PolicySchema field value
func (o *PolicyTypeObject) GetPolicySchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.PolicySchema
}

// GetPolicySchemaOk returns a tuple with the PolicySchema field value
// and a boolean to check if the value has been set.
func (o *PolicyTypeObject) GetPolicySchemaOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PolicySchema, true
}

// SetPolicySchema sets field value
func (o *PolicyTypeObject) SetPolicySchema(v map[string]interface{}) {
	o.PolicySchema = v
}

// GetStatusSchema returns the StatusSchema field value if set, zero value otherwise.
func (o *PolicyTypeObject) GetStatusSchema() map[string]interface{} {
	if o == nil || o.StatusSchema == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.StatusSchema
}

// GetStatusSchemaOk returns a tuple with the StatusSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyTypeObject) GetStatusSchemaOk() (*map[string]interface{}, bool) {
	if o == nil || o.StatusSchema == nil {
		return nil, false
	}
	return o.StatusSchema, true
}

// HasStatusSchema returns a boolean if a field has been set.
func (o *PolicyTypeObject) HasStatusSchema() bool {
	if o != nil && o.StatusSchema != nil {
		return true
	}

	return false
}

// SetStatusSchema gets a reference to the given map[string]interface{} and assigns it to the StatusSchema field.
func (o *PolicyTypeObject) SetStatusSchema(v map[string]interface{}) {
	o.StatusSchema = &v
}

func (o PolicyTypeObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["policySchema"] = o.PolicySchema
	}
	if o.StatusSchema != nil {
		toSerialize["statusSchema"] = o.StatusSchema
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyTypeObject struct {
	value *PolicyTypeObject
	isSet bool
}

func (v NullablePolicyTypeObject) Get() *PolicyTypeObject {
	return v.value
}

func (v *NullablePolicyTypeObject) Set(val *PolicyTypeObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTypeObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTypeObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTypeObject(val *PolicyTypeObject) *NullablePolicyTypeObject {
	return &NullablePolicyTypeObject{value: val, isSet: true}
}

func (v NullablePolicyTypeObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTypeObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


