/*
A1-P Policy Management Service

API for Policy Management Service. Â© 2021, O-RAN Alliance. All rights reserved. 

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AllPolicyIdentifiersApiService AllPolicyIdentifiersApi service
type AllPolicyIdentifiersApiService service

type ApiPolicytypesPolicyTypeIdPoliciesGetRequest struct {
	ctx _context.Context
	ApiService *AllPolicyIdentifiersApiService
	policyTypeId string
}


func (r ApiPolicytypesPolicyTypeIdPoliciesGetRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.PolicytypesPolicyTypeIdPoliciesGetExecute(r)
}

/*
PolicytypesPolicyTypeIdPoliciesGet Method for PolicytypesPolicyTypeIdPoliciesGet

Get all policy identifiers

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyTypeId
 @return ApiPolicytypesPolicyTypeIdPoliciesGetRequest
*/
func (a *AllPolicyIdentifiersApiService) PolicytypesPolicyTypeIdPoliciesGet(ctx _context.Context, policyTypeId string) ApiPolicytypesPolicyTypeIdPoliciesGetRequest {
	return ApiPolicytypesPolicyTypeIdPoliciesGetRequest{
		ApiService: a,
		ctx: ctx,
		policyTypeId: policyTypeId,
	}
}

// Execute executes the request
//  @return []string
func (a *AllPolicyIdentifiersApiService) PolicytypesPolicyTypeIdPoliciesGetExecute(r ApiPolicytypesPolicyTypeIdPoliciesGetRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllPolicyIdentifiersApiService.PolicytypesPolicyTypeIdPoliciesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policytypes/{policyTypeId}/policies"
	localVarPath = strings.Replace(localVarPath, "{"+"policyTypeId"+"}", _neturl.PathEscape(parameterToString(r.policyTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
