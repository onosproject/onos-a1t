// Package A1apEnrichmentInformation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package A1apEnrichmentInformation

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for EiJobStatusObjectEiJobStatus.
const (
	EiJobStatusObjectEiJobStatusDISABLED EiJobStatusObjectEiJobStatus = "DISABLED"

	EiJobStatusObjectEiJobStatusENABLED EiJobStatusObjectEiJobStatus = "ENABLED"
)

// Information for an Enrichment Information Job
type EiJobObject struct {
	// EI type Idenitifier of the EI job
	EiTypeId string `json:"eiTypeId"`

	// EI type specific job data
	JobDefinition map[string]interface{} `json:"jobDefinition"`

	// The target URI of the EI data
	JobResultUri string `json:"jobResultUri"`

	// The target of EI job status notifications
	JobStatusNotificationUri *string `json:"jobStatusNotificationUri,omitempty"`
}

// Status for an EI job
type EiJobStatusObject struct {
	// values:
	// ENABLED: the A1-EI producer is able to deliver EI result for the EI job
	// DISABLED: the A1-EI producer is unable to deliver EI result for the EI job
	EiJobStatus EiJobStatusObjectEiJobStatus `json:"eiJobStatus"`
}

// values:
// ENABLED: the A1-EI producer is able to deliver EI result for the EI job
// DISABLED: the A1-EI producer is unable to deliver EI result for the EI job
type EiJobStatusObjectEiJobStatus string

// EiResultObject defines model for EiResultObject.
type EiResultObject interface{}

// Information for an EI type
type EiTypeObject map[string]interface{}

// A problem detail to carry details in a HTTP response according to RFC 7807
type ProblemDetails struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`

	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status *int32  `json:"status,omitempty"`
	Title  *string `json:"title,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// GetEiJobIdsUsingGETParams defines parameters for GetEiJobIdsUsingGET.
type GetEiJobIdsUsingGETParams struct {
	// selects EI jobs of matching EI type
	EiTypeId *string `json:"eiTypeId,omitempty"`

	// selects EI jobs for one EI job owner
	Owner *string `json:"owner,omitempty"`
}

// PutIndividualEiJobUsingPUTJSONBody defines parameters for PutIndividualEiJobUsingPUT.
type PutIndividualEiJobUsingPUTJSONBody EiJobObject

// PutIndividualEiJobUsingPUTJSONRequestBody defines body for PutIndividualEiJobUsingPUT for application/json ContentType.
type PutIndividualEiJobUsingPUTJSONRequestBody PutIndividualEiJobUsingPUTJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetEiJobIdsUsingGET request
	GetEiJobIdsUsingGET(ctx context.Context, params *GetEiJobIdsUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualEiJobUsingDELETE request
	DeleteIndividualEiJobUsingDELETE(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualEiJobUsingGET request
	GetIndividualEiJobUsingGET(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIndividualEiJobUsingPUT request with any body
	PutIndividualEiJobUsingPUTWithBody(ctx context.Context, eiJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIndividualEiJobUsingPUT(ctx context.Context, eiJobId string, body PutIndividualEiJobUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEiJobStatusUsingGET request
	GetEiJobStatusUsingGET(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEiTypeIdentifiersUsingGET request
	GetEiTypeIdentifiersUsingGET(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEiTypeUsingGET request
	GetEiTypeUsingGET(ctx context.Context, eiTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetEiJobIdsUsingGET(ctx context.Context, params *GetEiJobIdsUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEiJobIdsUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualEiJobUsingDELETE(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualEiJobUsingDELETERequest(c.Server, eiJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualEiJobUsingGET(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualEiJobUsingGETRequest(c.Server, eiJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIndividualEiJobUsingPUTWithBody(ctx context.Context, eiJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIndividualEiJobUsingPUTRequestWithBody(c.Server, eiJobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIndividualEiJobUsingPUT(ctx context.Context, eiJobId string, body PutIndividualEiJobUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIndividualEiJobUsingPUTRequest(c.Server, eiJobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEiJobStatusUsingGET(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEiJobStatusUsingGETRequest(c.Server, eiJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEiTypeIdentifiersUsingGET(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEiTypeIdentifiersUsingGETRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEiTypeUsingGET(ctx context.Context, eiTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEiTypeUsingGETRequest(c.Server, eiTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetEiJobIdsUsingGETRequest generates requests for GetEiJobIdsUsingGET
func NewGetEiJobIdsUsingGETRequest(server string, params *GetEiJobIdsUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eijobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EiTypeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eiTypeId", runtime.ParamLocationQuery, *params.EiTypeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualEiJobUsingDELETERequest generates requests for DeleteIndividualEiJobUsingDELETE
func NewDeleteIndividualEiJobUsingDELETERequest(server string, eiJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, eiJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eijobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndividualEiJobUsingGETRequest generates requests for GetIndividualEiJobUsingGET
func NewGetIndividualEiJobUsingGETRequest(server string, eiJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, eiJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eijobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIndividualEiJobUsingPUTRequest calls the generic PutIndividualEiJobUsingPUT builder with application/json body
func NewPutIndividualEiJobUsingPUTRequest(server string, eiJobId string, body PutIndividualEiJobUsingPUTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIndividualEiJobUsingPUTRequestWithBody(server, eiJobId, "application/json", bodyReader)
}

// NewPutIndividualEiJobUsingPUTRequestWithBody generates requests for PutIndividualEiJobUsingPUT with any type of body
func NewPutIndividualEiJobUsingPUTRequestWithBody(server string, eiJobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, eiJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eijobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEiJobStatusUsingGETRequest generates requests for GetEiJobStatusUsingGET
func NewGetEiJobStatusUsingGETRequest(server string, eiJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, eiJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eijobs/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEiTypeIdentifiersUsingGETRequest generates requests for GetEiTypeIdentifiersUsingGET
func NewGetEiTypeIdentifiersUsingGETRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eitypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEiTypeUsingGETRequest generates requests for GetEiTypeUsingGET
func NewGetEiTypeUsingGETRequest(server string, eiTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eiTypeId", runtime.ParamLocationPath, eiTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/A1-EI/v1/eitypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetEiJobIdsUsingGET request
	GetEiJobIdsUsingGETWithResponse(ctx context.Context, params *GetEiJobIdsUsingGETParams, reqEditors ...RequestEditorFn) (*GetEiJobIdsUsingGETResponse, error)

	// DeleteIndividualEiJobUsingDELETE request
	DeleteIndividualEiJobUsingDELETEWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*DeleteIndividualEiJobUsingDELETEResponse, error)

	// GetIndividualEiJobUsingGET request
	GetIndividualEiJobUsingGETWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*GetIndividualEiJobUsingGETResponse, error)

	// PutIndividualEiJobUsingPUT request with any body
	PutIndividualEiJobUsingPUTWithBodyWithResponse(ctx context.Context, eiJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIndividualEiJobUsingPUTResponse, error)

	PutIndividualEiJobUsingPUTWithResponse(ctx context.Context, eiJobId string, body PutIndividualEiJobUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIndividualEiJobUsingPUTResponse, error)

	// GetEiJobStatusUsingGET request
	GetEiJobStatusUsingGETWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*GetEiJobStatusUsingGETResponse, error)

	// GetEiTypeIdentifiersUsingGET request
	GetEiTypeIdentifiersUsingGETWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEiTypeIdentifiersUsingGETResponse, error)

	// GetEiTypeUsingGET request
	GetEiTypeUsingGETWithResponse(ctx context.Context, eiTypeId string, reqEditors ...RequestEditorFn) (*GetEiTypeUsingGETResponse, error)
}

type GetEiJobIdsUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetEiJobIdsUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEiJobIdsUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualEiJobUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualEiJobUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualEiJobUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualEiJobUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EiJobObject
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetIndividualEiJobUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualEiJobUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIndividualEiJobUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PutIndividualEiJobUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIndividualEiJobUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEiJobStatusUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EiJobStatusObject
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetEiJobStatusUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEiJobStatusUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEiTypeIdentifiersUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetEiTypeIdentifiersUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEiTypeIdentifiersUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEiTypeUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EiTypeObject
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetEiTypeUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEiTypeUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetEiJobIdsUsingGETWithResponse request returning *GetEiJobIdsUsingGETResponse
func (c *ClientWithResponses) GetEiJobIdsUsingGETWithResponse(ctx context.Context, params *GetEiJobIdsUsingGETParams, reqEditors ...RequestEditorFn) (*GetEiJobIdsUsingGETResponse, error) {
	rsp, err := c.GetEiJobIdsUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEiJobIdsUsingGETResponse(rsp)
}

// DeleteIndividualEiJobUsingDELETEWithResponse request returning *DeleteIndividualEiJobUsingDELETEResponse
func (c *ClientWithResponses) DeleteIndividualEiJobUsingDELETEWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*DeleteIndividualEiJobUsingDELETEResponse, error) {
	rsp, err := c.DeleteIndividualEiJobUsingDELETE(ctx, eiJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualEiJobUsingDELETEResponse(rsp)
}

// GetIndividualEiJobUsingGETWithResponse request returning *GetIndividualEiJobUsingGETResponse
func (c *ClientWithResponses) GetIndividualEiJobUsingGETWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*GetIndividualEiJobUsingGETResponse, error) {
	rsp, err := c.GetIndividualEiJobUsingGET(ctx, eiJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualEiJobUsingGETResponse(rsp)
}

// PutIndividualEiJobUsingPUTWithBodyWithResponse request with arbitrary body returning *PutIndividualEiJobUsingPUTResponse
func (c *ClientWithResponses) PutIndividualEiJobUsingPUTWithBodyWithResponse(ctx context.Context, eiJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIndividualEiJobUsingPUTResponse, error) {
	rsp, err := c.PutIndividualEiJobUsingPUTWithBody(ctx, eiJobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIndividualEiJobUsingPUTResponse(rsp)
}

func (c *ClientWithResponses) PutIndividualEiJobUsingPUTWithResponse(ctx context.Context, eiJobId string, body PutIndividualEiJobUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIndividualEiJobUsingPUTResponse, error) {
	rsp, err := c.PutIndividualEiJobUsingPUT(ctx, eiJobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIndividualEiJobUsingPUTResponse(rsp)
}

// GetEiJobStatusUsingGETWithResponse request returning *GetEiJobStatusUsingGETResponse
func (c *ClientWithResponses) GetEiJobStatusUsingGETWithResponse(ctx context.Context, eiJobId string, reqEditors ...RequestEditorFn) (*GetEiJobStatusUsingGETResponse, error) {
	rsp, err := c.GetEiJobStatusUsingGET(ctx, eiJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEiJobStatusUsingGETResponse(rsp)
}

// GetEiTypeIdentifiersUsingGETWithResponse request returning *GetEiTypeIdentifiersUsingGETResponse
func (c *ClientWithResponses) GetEiTypeIdentifiersUsingGETWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEiTypeIdentifiersUsingGETResponse, error) {
	rsp, err := c.GetEiTypeIdentifiersUsingGET(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEiTypeIdentifiersUsingGETResponse(rsp)
}

// GetEiTypeUsingGETWithResponse request returning *GetEiTypeUsingGETResponse
func (c *ClientWithResponses) GetEiTypeUsingGETWithResponse(ctx context.Context, eiTypeId string, reqEditors ...RequestEditorFn) (*GetEiTypeUsingGETResponse, error) {
	rsp, err := c.GetEiTypeUsingGET(ctx, eiTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEiTypeUsingGETResponse(rsp)
}

// ParseGetEiJobIdsUsingGETResponse parses an HTTP response from a GetEiJobIdsUsingGETWithResponse call
func ParseGetEiJobIdsUsingGETResponse(rsp *http.Response) (*GetEiJobIdsUsingGETResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEiJobIdsUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteIndividualEiJobUsingDELETEResponse parses an HTTP response from a DeleteIndividualEiJobUsingDELETEWithResponse call
func ParseDeleteIndividualEiJobUsingDELETEResponse(rsp *http.Response) (*DeleteIndividualEiJobUsingDELETEResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualEiJobUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetIndividualEiJobUsingGETResponse parses an HTTP response from a GetIndividualEiJobUsingGETWithResponse call
func ParseGetIndividualEiJobUsingGETResponse(rsp *http.Response) (*GetIndividualEiJobUsingGETResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualEiJobUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EiJobObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutIndividualEiJobUsingPUTResponse parses an HTTP response from a PutIndividualEiJobUsingPUTWithResponse call
func ParsePutIndividualEiJobUsingPUTResponse(rsp *http.Response) (*PutIndividualEiJobUsingPUTResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIndividualEiJobUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEiJobStatusUsingGETResponse parses an HTTP response from a GetEiJobStatusUsingGETWithResponse call
func ParseGetEiJobStatusUsingGETResponse(rsp *http.Response) (*GetEiJobStatusUsingGETResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEiJobStatusUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EiJobStatusObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEiTypeIdentifiersUsingGETResponse parses an HTTP response from a GetEiTypeIdentifiersUsingGETWithResponse call
func ParseGetEiTypeIdentifiersUsingGETResponse(rsp *http.Response) (*GetEiTypeIdentifiersUsingGETResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEiTypeIdentifiersUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEiTypeUsingGETResponse parses an HTTP response from a GetEiTypeUsingGETWithResponse call
func ParseGetEiTypeUsingGETResponse(rsp *http.Response) (*GetEiTypeUsingGETResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEiTypeUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EiTypeObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// EI job identifiers
	// (GET /A1-EI/v1/eijobs)
	GetEiJobIdsUsingGET(ctx echo.Context, params GetEiJobIdsUsingGETParams) error
	// Individual EI job
	// (DELETE /A1-EI/v1/eijobs/{eiJobId})
	DeleteIndividualEiJobUsingDELETE(ctx echo.Context, eiJobId string) error
	// Individual EI job
	// (GET /A1-EI/v1/eijobs/{eiJobId})
	GetIndividualEiJobUsingGET(ctx echo.Context, eiJobId string) error
	// Individual EI job
	// (PUT /A1-EI/v1/eijobs/{eiJobId})
	PutIndividualEiJobUsingPUT(ctx echo.Context, eiJobId string) error
	// EI job status
	// (GET /A1-EI/v1/eijobs/{eiJobId}/status)
	GetEiJobStatusUsingGET(ctx echo.Context, eiJobId string) error
	// EI type identifiers
	// (GET /A1-EI/v1/eitypes)
	GetEiTypeIdentifiersUsingGET(ctx echo.Context) error
	// Individual EI type
	// (GET /A1-EI/v1/eitypes/{eiTypeId})
	GetEiTypeUsingGET(ctx echo.Context, eiTypeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEiJobIdsUsingGET converts echo context to params.
func (w *ServerInterfaceWrapper) GetEiJobIdsUsingGET(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEiJobIdsUsingGETParams
	// ------------- Optional query parameter "eiTypeId" -------------

	err = runtime.BindQueryParameter("form", true, false, "eiTypeId", ctx.QueryParams(), &params.EiTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiTypeId: %s", err))
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", ctx.QueryParams(), &params.Owner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEiJobIdsUsingGET(ctx, params)
	return err
}

// DeleteIndividualEiJobUsingDELETE converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIndividualEiJobUsingDELETE(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eiJobId" -------------
	var eiJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, ctx.Param("eiJobId"), &eiJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiJobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIndividualEiJobUsingDELETE(ctx, eiJobId)
	return err
}

// GetIndividualEiJobUsingGET converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndividualEiJobUsingGET(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eiJobId" -------------
	var eiJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, ctx.Param("eiJobId"), &eiJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiJobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIndividualEiJobUsingGET(ctx, eiJobId)
	return err
}

// PutIndividualEiJobUsingPUT converts echo context to params.
func (w *ServerInterfaceWrapper) PutIndividualEiJobUsingPUT(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eiJobId" -------------
	var eiJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, ctx.Param("eiJobId"), &eiJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiJobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIndividualEiJobUsingPUT(ctx, eiJobId)
	return err
}

// GetEiJobStatusUsingGET converts echo context to params.
func (w *ServerInterfaceWrapper) GetEiJobStatusUsingGET(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eiJobId" -------------
	var eiJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "eiJobId", runtime.ParamLocationPath, ctx.Param("eiJobId"), &eiJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiJobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEiJobStatusUsingGET(ctx, eiJobId)
	return err
}

// GetEiTypeIdentifiersUsingGET converts echo context to params.
func (w *ServerInterfaceWrapper) GetEiTypeIdentifiersUsingGET(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEiTypeIdentifiersUsingGET(ctx)
	return err
}

// GetEiTypeUsingGET converts echo context to params.
func (w *ServerInterfaceWrapper) GetEiTypeUsingGET(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eiTypeId" -------------
	var eiTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "eiTypeId", runtime.ParamLocationPath, ctx.Param("eiTypeId"), &eiTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eiTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEiTypeUsingGET(ctx, eiTypeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/A1-EI/v1/eijobs", wrapper.GetEiJobIdsUsingGET)
	router.DELETE(baseURL+"/A1-EI/v1/eijobs/:eiJobId", wrapper.DeleteIndividualEiJobUsingDELETE)
	router.GET(baseURL+"/A1-EI/v1/eijobs/:eiJobId", wrapper.GetIndividualEiJobUsingGET)
	router.PUT(baseURL+"/A1-EI/v1/eijobs/:eiJobId", wrapper.PutIndividualEiJobUsingPUT)
	router.GET(baseURL+"/A1-EI/v1/eijobs/:eiJobId/status", wrapper.GetEiJobStatusUsingGET)
	router.GET(baseURL+"/A1-EI/v1/eitypes", wrapper.GetEiTypeIdentifiersUsingGET)
	router.GET(baseURL+"/A1-EI/v1/eitypes/:eiTypeId", wrapper.GetEiTypeUsingGET)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY3XLbNhN9FQy+XHydoUTJcpsO75RKSZXJOBrHnl7EvoDAlQSXBBgAlK169EB9jT5Z",
	"ZwFKpEjKcv6ajtMrWwR4gD3n7ALLe8pVmikJ0hoa3VPDl5Ay9+9YvFazt7Mb4BZ/xmC4FpkVStKITuRc",
	"6ZThLzJXmjBJxlILvkxBWlIdfa1mNKCZVhloK8BBg7hYZzCJm7jjCbHrDMgkBimsmAvQRM2JXQIZT8iN",
	"w8IJNKLGaiEXdBPQGzUbwVzgCwhyCNNkwMVccIQhMbOsxFI+TI91DiZP7KUWTaiLJRDL9AIsuTyfVHa2",
	"D7e3tXeW2dycKYyGO06OQat5ESwx7l0iKy+b5jKbgGr4kAsNMY3el+zWmalFdx1QK2yCSFWtW0hxwz6O",
	"Q4bwozsvbLWq677DaSKsWJKDia7k+Gz44s14FDluh/3OeEIyreKcgybCEDZLgFhFYkjECjSupV1MbvHS",
	"KVdyNHn3IFIuH4tFAwoyT5HdYnc0oFt4R+QRRcq466zv0drKvVesJL58fW/EzUXlPyZnfWrQ6p4qEC3b",
	"mWo1SyAdgWUiaVFxiAzjDBK7KcguZ1qvi9+GCEkY+fXiYopUZ0oaIIxzpWMhFzj7/OUv5PnPvecN93iA",
	"tiWXecpkRwOLnaBwlyVM+kB3SW8VsUthiOI81xokh236Fhvuosh3LM08Dz4BXeGQCv2Qy7gtw4U0lkkO",
	"Tpn6oDngdUx2R0GR4FzFQBYgQTMLMZmt3caUFgshiQGN3vSOfHQEp73TgHrBaUSFtIOTcvtCWliAxi0W",
	"wrds3j+4b/H21iw1MzTsgnPhzoKWLBkp3kLE28758Kz726uT7rA/nHZWvUG31yfDPsEd6jnjEJFhliVF",
	"8SNTraziKqEBzXVCI7q0NjNRGN7e3nZVRzPZVXoRblUvKqaTaa5arDOdOF4PnF3vQK8Eh+6V/OtPctI7",
	"6QfEbZgMk0Sg6N0rOUwSosViaQ36GaWKu1eyklG+7jy8Ag3oCrTxm+p3e90+7lllIFkmaEQH7lFAM2aX",
	"jsXQoYarfgjiRs3cswW0JP2HHPTax+gdLWKQ/mBFwTC/3E7wMKavwLqaNInNpRFy8Wp84RbVLAWLL0Tv",
	"6/gGEuDWFOgGHZkyy5eYzGV1Ebut0IBKliIvlWPK3zpavXZsPYxMyW2dJupWgj6w4Hbs8GrXWLZ9TXKM",
	"nvR6+IcraUE6clnpxfDG+NtGiScspOaBXKJMa7b2edG4o9TF2QT0tNdvKnopWW6XSos/IPaTBs1JL5We",
	"iTgG6WecflQYzzTMaUT/F5Z3w7C4GIa1lG8Lpd3prpIKUymm+KrJ05TpdTsDAbVsgaYrcuj/UEKLEvoH",
	"eo1Q9ZQI78F7eePpScC6crZv+ZF7PpGxWIk4Z4nzvzP/aPxmfDE+5v9ija3lMEGrFt8OlrcBq3P4BA/u",
	"r3qmLMmN1//Eq7s/4TVecV1o8VMzknPJYR+VUlY6hsfaKNgW0UZdbHPII8rjP2WPLyJJtQs4WKP+s9PH",
	"2CnLXVycJcmM8d+dZLsmDH/cP0PtwdjuTMXrbrVBc3UrU6blVB/5foUVd8DxpPAQGPtCxesv6Ij9FmO/",
	"sUGvbhp+PH2489DAQazQIhsH19ohtzPT2kk/wJKbuSZspnK7u2kvmVyAKW/TO1W/Dn/1Du9TKaxGXeNw",
	"U7/GTfPWcjW9/Ebl6ivxerhSwd7njGNs99qPzzyLmd0esf32OVwDe4JH7LG72ucUxYDedbDdXQB27M4a",
	"HUzwTtVlO2kfutaFZXd96NSu5N/TPbGb9aW1tyjY+r6O7/3YP72hQFGPOM13s7vupeK3b9dT+kT+mk1l",
	"sy952S5DYyufKQbWAU/55rguj0/+3TeJ1uzfjf5b0r/ysfawA77v42n7gfvRZkMs98nVO8R/ZwzDRHGW",
	"LJWx0eCnwY+DkKK0Ber91iJH0DfXm78DAAD//0Bfj51yGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

