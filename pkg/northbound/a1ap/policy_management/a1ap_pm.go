// Package A1apPolicyManagement provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package A1apPolicyManagement

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// A JSON schema following http://json-schema.org/draft-07/schema
type JsonSchema map[string]interface{}

// A complete callback URI defined according to IETF RFC 3986 where to send notifications
type NotificationDestination string

// Policy identifier assigned by the A1-P Consumer when a policy is created
type PolicyId string

// A generic policy object that can be used to transport any policy. Additionally, a policy shall be valid according to the schema of its specific policy type.
type PolicyObject map[string]interface{}

// A generic policy status object that can be used to transport any policy status. Additionally, a policy status shall be valid according to the schema of its specific policy type.
type PolicyStatusObject map[string]interface{}

// Policy type identifier assigned by the A1-P Provider
type PolicyTypeId string

// A definition of a policy type, i.e. the schemas for a policy respectively its status
type PolicyTypeObject struct {
	// A JSON schema following http://json-schema.org/draft-07/schema
	PolicySchema JsonSchema `json:"policySchema"`

	// A JSON schema following http://json-schema.org/draft-07/schema
	StatusSchema *JsonSchema `json:"statusSchema,omitempty"`
}

// A problem detail to carry details in a HTTP response according to RFC 7807
type ProblemDetails struct {
	Detail   *string  `json:"detail,omitempty"`
	Instance *string  `json:"instance,omitempty"`
	Status   *float32 `json:"status,omitempty"`
	Title    *string  `json:"title,omitempty"`
	Type     *string  `json:"type,omitempty"`
}

// PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONBody defines parameters for PutPolicytypesPolicyTypeIdPoliciesPolicyId.
type PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONBody PolicyObject

// PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams defines parameters for PutPolicytypesPolicyTypeIdPoliciesPolicyId.
type PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams struct {
	NotificationDestination *NotificationDestination `json:"notificationDestination,omitempty"`
}

// PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody defines body for PutPolicytypesPolicyTypeIdPoliciesPolicyId for application/json ContentType.
type PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPolicytypes request
	GetPolicytypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicytypesPolicyTypeId request
	GetPolicytypesPolicyTypeId(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicytypesPolicyTypeIdPolicies request
	GetPolicytypesPolicyTypeIdPolicies(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicytypesPolicyTypeIdPoliciesPolicyId request
	DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicytypesPolicyTypeIdPoliciesPolicyId request
	GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPolicytypesPolicyTypeIdPoliciesPolicyId request with any body
	PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBody(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, body PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus request
	GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPolicytypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicytypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicytypesPolicyTypeId(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicytypesPolicyTypeIdRequest(c.Server, policyTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicytypesPolicyTypeIdPolicies(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicytypesPolicyTypeIdPoliciesRequest(c.Server, policyTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicytypesPolicyTypeIdPoliciesPolicyIdRequest(c.Server, policyTypeId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdRequest(c.Server, policyTypeId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBody(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequestWithBody(c.Server, policyTypeId, policyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, body PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequest(c.Server, policyTypeId, policyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusRequest(c.Server, policyTypeId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPolicytypesRequest generates requests for GetPolicytypes
func NewGetPolicytypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicytypesPolicyTypeIdRequest generates requests for GetPolicytypesPolicyTypeId
func NewGetPolicytypesPolicyTypeIdRequest(server string, policyTypeId PolicyTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicytypesPolicyTypeIdPoliciesRequest generates requests for GetPolicytypesPolicyTypeIdPolicies
func NewGetPolicytypesPolicyTypeIdPoliciesRequest(server string, policyTypeId PolicyTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolicytypesPolicyTypeIdPoliciesPolicyIdRequest generates requests for DeletePolicytypesPolicyTypeIdPoliciesPolicyId
func NewDeletePolicytypesPolicyTypeIdPoliciesPolicyIdRequest(server string, policyTypeId PolicyTypeId, policyId PolicyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdRequest generates requests for GetPolicytypesPolicyTypeIdPoliciesPolicyId
func NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdRequest(server string, policyTypeId PolicyTypeId, policyId PolicyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequest calls the generic PutPolicytypesPolicyTypeIdPoliciesPolicyId builder with application/json body
func NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequest(server string, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, body PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequestWithBody(server, policyTypeId, policyId, params, "application/json", bodyReader)
}

// NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequestWithBody generates requests for PutPolicytypesPolicyTypeIdPoliciesPolicyId with any type of body
func NewPutPolicytypesPolicyTypeIdPoliciesPolicyIdRequestWithBody(server string, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NotificationDestination != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notificationDestination", runtime.ParamLocationQuery, *params.NotificationDestination); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusRequest generates requests for GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus
func NewGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusRequest(server string, policyTypeId PolicyTypeId, policyId PolicyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, policyTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policytypes/%s/policies/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPolicytypes request
	GetPolicytypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPolicytypesResponse, error)

	// GetPolicytypesPolicyTypeId request
	GetPolicytypesPolicyTypeIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdResponse, error)

	// GetPolicytypesPolicyTypeIdPolicies request
	GetPolicytypesPolicyTypeIdPoliciesWithResponse(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesResponse, error)

	// DeletePolicytypesPolicyTypeIdPoliciesPolicyId request
	DeletePolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error)

	// GetPolicytypesPolicyTypeIdPoliciesPolicyId request
	GetPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error)

	// PutPolicytypesPolicyTypeIdPoliciesPolicyId request with any body
	PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error)

	PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, body PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error)

	// GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus request
	GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse, error)
}

type GetPolicytypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyTypeId
}

// Status returns HTTPResponse.Status
func (r GetPolicytypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicytypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicytypesPolicyTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyTypeObject
}

// Status returns HTTPResponse.Status
func (r GetPolicytypesPolicyTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicytypesPolicyTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicytypesPolicyTypeIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyId
}

// Status returns HTTPResponse.Status
func (r GetPolicytypesPolicyTypeIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicytypesPolicyTypeIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyObject
}

// Status returns HTTPResponse.Status
func (r GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyObject
	JSON201      *PolicyObject
}

// Status returns HTTPResponse.Status
func (r PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyStatusObject
}

// Status returns HTTPResponse.Status
func (r GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPolicytypesWithResponse request returning *GetPolicytypesResponse
func (c *ClientWithResponses) GetPolicytypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPolicytypesResponse, error) {
	rsp, err := c.GetPolicytypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicytypesResponse(rsp)
}

// GetPolicytypesPolicyTypeIdWithResponse request returning *GetPolicytypesPolicyTypeIdResponse
func (c *ClientWithResponses) GetPolicytypesPolicyTypeIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdResponse, error) {
	rsp, err := c.GetPolicytypesPolicyTypeId(ctx, policyTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicytypesPolicyTypeIdResponse(rsp)
}

// GetPolicytypesPolicyTypeIdPoliciesWithResponse request returning *GetPolicytypesPolicyTypeIdPoliciesResponse
func (c *ClientWithResponses) GetPolicytypesPolicyTypeIdPoliciesWithResponse(ctx context.Context, policyTypeId PolicyTypeId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesResponse, error) {
	rsp, err := c.GetPolicytypesPolicyTypeIdPolicies(ctx, policyTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicytypesPolicyTypeIdPoliciesResponse(rsp)
}

// DeletePolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse request returning *DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) DeletePolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp)
}

// GetPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse request returning *GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) GetPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp)
}

// PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBodyWithResponse request with arbitrary body returning *PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse
func (c *ClientWithResponses) PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithBody(ctx, policyTypeId, policyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp)
}

func (c *ClientWithResponses) PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, params *PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams, body PutPolicytypesPolicyTypeIdPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp)
}

// GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusWithResponse request returning *GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse
func (c *ClientWithResponses) GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusWithResponse(ctx context.Context, policyTypeId PolicyTypeId, policyId PolicyId, reqEditors ...RequestEditorFn) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse, error) {
	rsp, err := c.GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx, policyTypeId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse(rsp)
}

// ParseGetPolicytypesResponse parses an HTTP response from a GetPolicytypesWithResponse call
func ParseGetPolicytypesResponse(rsp *http.Response) (*GetPolicytypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicytypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyTypeId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicytypesPolicyTypeIdResponse parses an HTTP response from a GetPolicytypesPolicyTypeIdWithResponse call
func ParseGetPolicytypesPolicyTypeIdResponse(rsp *http.Response) (*GetPolicytypesPolicyTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicytypesPolicyTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyTypeObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicytypesPolicyTypeIdPoliciesResponse parses an HTTP response from a GetPolicytypesPolicyTypeIdPoliciesWithResponse call
func ParseGetPolicytypesPolicyTypeIdPoliciesResponse(rsp *http.Response) (*GetPolicytypesPolicyTypeIdPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicytypesPolicyTypeIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse parses an HTTP response from a DeletePolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse call
func ParseDeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp *http.Response) (*DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicytypesPolicyTypeIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse parses an HTTP response from a GetPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse call
func ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp *http.Response) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicytypesPolicyTypeIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse parses an HTTP response from a PutPolicytypesPolicyTypeIdPoliciesPolicyIdWithResponse call
func ParsePutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse(rsp *http.Response) (*PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPolicytypesPolicyTypeIdPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse parses an HTTP response from a GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusWithResponse call
func ParseGetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse(rsp *http.Response) (*GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyStatusObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /policytypes)
	GetPolicytypes(ctx echo.Context) error

	// (GET /policytypes/{policyTypeId})
	GetPolicytypesPolicyTypeId(ctx echo.Context, policyTypeId PolicyTypeId) error

	// (GET /policytypes/{policyTypeId}/policies)
	GetPolicytypesPolicyTypeIdPolicies(ctx echo.Context, policyTypeId PolicyTypeId) error

	// (DELETE /policytypes/{policyTypeId}/policies/{policyId})
	DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context, policyTypeId PolicyTypeId, policyId PolicyId) error

	// (GET /policytypes/{policyTypeId}/policies/{policyId})
	GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context, policyTypeId PolicyTypeId, policyId PolicyId) error

	// (PUT /policytypes/{policyTypeId}/policies/{policyId})
	PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context, policyTypeId PolicyTypeId, policyId PolicyId, params PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams) error

	// (GET /policytypes/{policyTypeId}/policies/{policyId}/status)
	GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx echo.Context, policyTypeId PolicyTypeId, policyId PolicyId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPolicytypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicytypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicytypes(ctx)
	return err
}

// GetPolicytypesPolicyTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicytypesPolicyTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicytypesPolicyTypeId(ctx, policyTypeId)
	return err
}

// GetPolicytypesPolicyTypeIdPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicytypesPolicyTypeIdPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicytypesPolicyTypeIdPolicies(ctx, policyTypeId)
	return err
}

// DeletePolicytypesPolicyTypeIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId PolicyId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId)
	return err
}

// GetPolicytypesPolicyTypeIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId PolicyId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId)
	return err
}

// PutPolicytypesPolicyTypeIdPoliciesPolicyId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId PolicyId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutPolicytypesPolicyTypeIdPoliciesPolicyIdParams
	// ------------- Optional query parameter "notificationDestination" -------------

	err = runtime.BindQueryParameter("form", true, false, "notificationDestination", ctx.QueryParams(), &params.NotificationDestination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notificationDestination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPolicytypesPolicyTypeIdPoliciesPolicyId(ctx, policyTypeId, policyId, params)
	return err
}

// GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyTypeId" -------------
	var policyTypeId PolicyTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyTypeId", runtime.ParamLocationPath, ctx.Param("policyTypeId"), &policyTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyTypeId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId PolicyId

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyId", runtime.ParamLocationPath, ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus(ctx, policyTypeId, policyId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/policytypes", wrapper.GetPolicytypes)
	router.GET(baseURL+"/policytypes/:policyTypeId", wrapper.GetPolicytypesPolicyTypeId)
	router.GET(baseURL+"/policytypes/:policyTypeId/policies", wrapper.GetPolicytypesPolicyTypeIdPolicies)
	router.DELETE(baseURL+"/policytypes/:policyTypeId/policies/:policyId", wrapper.DeletePolicytypesPolicyTypeIdPoliciesPolicyId)
	router.GET(baseURL+"/policytypes/:policyTypeId/policies/:policyId", wrapper.GetPolicytypesPolicyTypeIdPoliciesPolicyId)
	router.PUT(baseURL+"/policytypes/:policyTypeId/policies/:policyId", wrapper.PutPolicytypesPolicyTypeIdPoliciesPolicyId)
	router.GET(baseURL+"/policytypes/:policyTypeId/policies/:policyId/status", wrapper.GetPolicytypesPolicyTypeIdPoliciesPolicyIdStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/58hd2TBIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

